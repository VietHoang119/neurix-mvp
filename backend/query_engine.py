# backend/query_engine.py
import faiss
import numpy as np
import pandas as pd
from sentence_transformers import SentenceTransformer

# Load l·∫°i model gi·ªëng embedding.py
model = SentenceTransformer("paraphrase-MiniLM-L6-v2")

def preprocess_query(query_text):
    """Ti·ªÅn x·ª≠ l√Ω truy v·∫•n (n·∫øu c·∫ßn m·ªü r·ªông v·ªÅ sau)"""
    return query_text.strip()

def encode_query(query_text):
    """T·∫°o embedding t·ª´ c√¢u h·ªèi"""
    query_embedding = model.encode(
        [preprocess_query(query_text)],
        normalize_embeddings=True
    )
    return np.array(query_embedding).astype("float32")

def load_faiss_index(index_path="models/faiss_index.index"):
    """T·∫£i FAISS index ƒë√£ t·∫°o"""
    return faiss.read_index(index_path)

def search_faiss_index(query_vector, index, top_k=5):
    """T√¨m top_k k·∫øt qu·∫£ g·∫ßn nh·∫•t"""
    distances, indices = index.search(query_vector, top_k)
    return indices[0], distances[0]  # Tr·∫£ v·ªÅ danh s√°ch v·ªã tr√≠ v√† kho·∫£ng c√°ch

def get_top_matches(df, query_text, index_path="models/faiss_index.index", top_k=5):
    """T√¨m top_k d√≤ng trong df g·∫ßn nh·∫•t v·ªõi c√¢u truy v·∫•n"""
    query_vec = encode_query(query_text)
    index = load_faiss_index(index_path)
    matched_indices, distances = search_faiss_index(query_vec, index, top_k=top_k)

    results = df.iloc[matched_indices].copy()
    results["üîç Similarity Score"] = (1 - distances).round(4)  # FAISS d√πng L2, m√¨nh ƒë·ªïi sang score g·∫ßn ƒë√∫ng
    return results
